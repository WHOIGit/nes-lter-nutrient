mutate(nitrate_c = round(nitrate_c, 3)) %>%
mutate(ammonium_a = round(ammonium_a, 3)) %>%
mutate(ammonium_b = round(ammonium_b, 3)) %>%
mutate(ammonium_c = round(ammonium_c, 3)) %>%
mutate(phosphate_a = round(phosphate_a, 3)) %>%
mutate(phosphate_b = round(phosphate_b, 3)) %>%
mutate(phosphate_c = round(phosphate_c, 3)) %>%
mutate(silicate_a = round(silicate_a, 3)) %>%
mutate(silicate_b = round(silicate_b, 3)) %>%
mutate(silicate_c = round(silicate_c, 3))
# ensure rows are in time order
nutrients_input <- nutrients_input[order(nutrients_input$datetime),]
# create dataframe for comparison to package version 1 data
# remove event_number_niskin field from this dataframe only
nutr_input_compare <- nutrients_input %>%
select(-event_number_niskin)
url <- ('https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-nes.1.2&entityid=9740e9ac9cd58ed3640158fbedef8180')
httr::GET(url, write_disk(tf <- tempfile(fileext = ".csv")))
library(httr)
detach("package:here", unload = TRUE)
detach("package:httr", unload = TRUE)
library(here)
library(httr)
knitr::opts_chunk$set(echo = TRUE)
# load required packages
# two of the required packages are installed from GitHub
# uncomment these lines to update as needed
# library(remotes)
# remotes::install_github("EDIorg/EMLassemblyline")
# remotes::install_github("WHOIGit/ediutilities")
library(EMLassemblyline)
library(ediutilities)
library(here)
library(tidyverse)
library(readxl)
library(lubridate)
library(devtools)
library(EML)
library(maps)
library(xml2)
library(geosphere)
library(httr)
library(compareDF)
#set path to root of project
here("nes-lter-nutrient")
nutrients_input <- read_excel('MVCO_nut_copy01Nov2021.xls')
# remove quotation marks and spaces
names(nutrients_input)<- gsub("'", "", names(nutrients_input))
names(nutrients_input)<- gsub(" ", "", names(nutrients_input))
names(nutrients_input)<- gsub("-", "", names(nutrients_input))
names(nutrients_input)<- gsub(" + ", "", names(nutrients_input))
# combine date and time
nutrients_input$Start_Date <- as.character(nutrients_input$Start_Date)
nutrients_input$Start_Time_UTC <- as.character(nutrients_input$Start_Time_UTC)
nutrients_input$Start_Time_UTC <-gsub("1899-12-31 ", "", nutrients_input$Start_Time_UTC)
nutrients_input$datetime <- paste(nutrients_input$Start_Date, nutrients_input$Start_Time_UTC)
nutrients_input$datetime <- as.POSIXct(nutrients_input$datetime, tz = "GMT", format="%Y-%m-%d %H:%M:%OS")
# rename nutrient columns
nutrients_input <-  nutrients_input %>%
rename(nitrate_a = `Nut_a_uMNO2+NO3`) %>%  # nitrate is really nitrate + nitrite #keep simple for wrangling then rename
rename(nitrate_b = `Nut_b_uMNO2+NO3`) %>%
rename(nitrate_c = `Nut_c_uMNO2+NO3`) %>%
rename(ammonium_a = `Nut_a_uMNH4+`) %>%
rename(ammonium_b = `Nut_b_uMNH4+`) %>%
rename(ammonium_c = `Nut_c_uMNH4+`) %>%
rename(silicate_a = `Nut_a_uMSiO2`) %>%
rename(silicate_b = `Nut_b_uMSiO2`) %>%
rename(silicate_c = `Nut_c_uMSiO2`) %>%
rename(phosphate_a = `Nut_a_uMPO43`) %>%
rename(phosphate_b = `Nut_b_uMPO43`) %>%
rename(phosphate_c = `Nut_c_uMPO43`) %>%
select(-Start_Date, -Start_Time_UTC)  %>%
relocate(datetime, .before = Latitude)
names(nutrients_input)<- tolower(names(nutrients_input))
# round lat/long and nutrient concentration columns
nutrients_input <- nutrients_input  %>%
mutate(latitude = round(latitude, 4)) %>%
mutate(longitude = round(longitude, 4)) %>%
mutate(nitrate_a = round(nitrate_a, 3)) %>%
mutate(nitrate_b = round(nitrate_b, 3)) %>%
mutate(nitrate_c = round(nitrate_c, 3)) %>%
mutate(ammonium_a = round(ammonium_a, 3)) %>%
mutate(ammonium_b = round(ammonium_b, 3)) %>%
mutate(ammonium_c = round(ammonium_c, 3)) %>%
mutate(phosphate_a = round(phosphate_a, 3)) %>%
mutate(phosphate_b = round(phosphate_b, 3)) %>%
mutate(phosphate_c = round(phosphate_c, 3)) %>%
mutate(silicate_a = round(silicate_a, 3)) %>%
mutate(silicate_b = round(silicate_b, 3)) %>%
mutate(silicate_c = round(silicate_c, 3))
# ensure rows are in time order
nutrients_input <- nutrients_input[order(nutrients_input$datetime),]
# create dataframe for comparison to package version 1 data
# remove event_number_niskin field from this dataframe only
nutr_input_compare <- nutrients_input %>%
select(-event_number_niskin)
url <- ('https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-nes.1.2&entityid=9740e9ac9cd58ed3640158fbedef8180')
httr::GET(url, write_disk(tf <- tempfile(fileext = ".csv")))
tf
nutr_pubd <- read_csv(tf, TRUE, show_col_types = FALSE)
# rename nutrient columns
nutr_pubd <-  nutr_pubd %>%
rename(datetime = 'time (UTC)') %>%
rename(nitrate_a = ntra_a) %>%
rename(nitrate_b = ntra_b) %>%
rename(nitrate_c = ntra_c) %>%
rename(ammonium_a = amon_a) %>%
rename(ammonium_b = amon_b) %>%
rename(ammonium_c = amon_c) %>%
rename(silicate_a = slca_a) %>%
rename(silicate_b =  slca_b) %>%
rename(silicate_c =  slca_c) %>%
rename(phosphate_a = phos_a) %>%
rename(phosphate_b = phos_b) %>%
rename(phosphate_c = phos_c)
# ensure rows are in time order
nutr_pubd <- nutr_pubd[order(nutr_pubd$datetime),]
comparison <- compare_df(nutr_input_compare, nutr_pubd, c("event_number", "depth"))
create_output_table(comparison, output_type='xlsx', file_name='version_comparison.xlsx')
# findings:
# 4 instances in which nutrient concentrations differ by 0.001 between versions due to rounding
# many instances in which longitude differs by 0.001 between versions
# new version includes these event numbers not included in the original version:
# MVCO_003-MVCO_045, May 2003-Feb 2006
# MVCO_368, 24-August-2016, original had only one depth, new version includes 3 additional depths
# MVCO_382-MVCO_435, June 2017-November 2020
nitrate <- nutrients_input %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c)  %>%
pivot_longer(cols = c(nitrate_a, nitrate_b, nitrate_c), names_to = "replicate",  values_to = "nitrate")
nitrate$replicate <- gsub("nitrate_", "", nitrate$replicate)
ammonium <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c) %>%
pivot_longer(cols = c(ammonium_a, ammonium_b, ammonium_c), names_to = "replicate",  values_to = "ammonium")
ammonium$replicate <- gsub("ammonium_", "", ammonium$replicate)
silicate <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c) %>%
pivot_longer(cols = c(silicate_a, silicate_b, silicate_c), names_to = "replicate",  values_to = "silicate")
silicate$replicate <- gsub("silicate_", "", silicate$replicate)
phosphate <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
pivot_longer(cols = c(phosphate_a, phosphate_b, phosphate_c), names_to = "replicate",  values_to = "phosphate")
phosphate$replicate <- gsub("phosphate_", "", phosphate$replicate)
nutrients_long <- full_join(nitrate, ammonium, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
nutrients_long <- full_join(nutrients_long, silicate, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
nutrients_long <- full_join(nutrients_long, phosphate, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
# check that number of samples and sums of values in transformed data match input data
nutrient <- c("nitrate", "ammonium", "phosphate", "silicate")
check <- data.frame(nutrient)
check$input_n <- NA_integer_
check$input_sum <- NA_integer_
check$long_n <- NA_integer_
check$long_sum <- NA_integer_
# count non-NA values in input data and sum all values of each nutrient in input data
for (i in 1:nrow(check)){
nutrient <- check$nutrient[i]
a <- select(nutrients_input, paste0(nutrient,"_a"))
b <- select(nutrients_input, paste0(nutrient,"_b"))
c <- select(nutrients_input, paste0(nutrient,"_c"))
check$input_n[i] <- sum(!is.na(a)) + sum(!is.na(b)) + sum(!is.na(c))
check$input_sum[i] <- sum(a, na.rm = TRUE) + sum(b, na.rm = TRUE) + sum(c, na.rm = TRUE)
}
# count non-NA values in transformed data and sum all values of each nutrient in transformed data
for (i in 1:nrow(check)){
nutrient <- check$nutrient[i]
check$long_n[i] <- sum(!is.na(select(nutrients_long, nutrient)))
check$long_sum[i] <- sum(select(nutrients_long, nutrient), na.rm = TRUE)
}
check$diff_n <- check$input_n - check$long_n
check$diff_sum <- check$input_sum - check$long_sum
Tioga_ID <- read_csv('MVCO_Tioga_cruise_list_2017-2021.csv', col_select = 1:4, show_col_types = FALSE)
# join Tioga cruise number to MV_event
Tioga_ID$event_number <- paste0("MVCO_", Tioga_ID$MV_Event)
nutrients_long <- left_join(nutrients_long, Tioga_ID, by = "event_number")
nutrients_long <- nutrients_long %>%
rename(ship = Ship) %>%
rename(cruise_ID = 'Cruise ID') %>%
select(-Date, -MV_Event)  %>%
relocate(ship, .before = datetime) %>%
relocate(cruise_ID, .before = datetime)
summary(nutrients_long) # visual min max for all columns
# visually check the printed nutrient data for maxima exceeding expected thresholds:
# nitrate > 30
# ammonium > 5
# phosphate > 3
# silicate > 60
# filter for values exceeding the thresholds
high_nitrate <- nutrients_long %>%  filter(nitrate > 30)
high_ammonium <- nutrients_long %>% filter(ammonium > 5)
high_phosphate <- nutrients_long %>% filter(phosphate > 3)
high_silicate <- nutrients_long %>% filter(silicate > 60)
# check console output for summary and alerts
print(paste(nrow(high_nitrate), "nitrate observations exceed max" ))
print(paste(nrow(high_ammonium), "ammonium observations exceed max" ))
print(paste(nrow(high_phosphate), "phosphate observations exceed max" ))
print(paste(nrow(high_silicate), "silicate observations exceed max" ))
# investigate high ammonium values
hist(high_ammonium$ammonium)
# could rbind all high nutrient data frames for better reproducibility # this way is simpler in this instance
write.csv(high_ammonium, "high_ammonium.csv")
# only one of these values is new to version 3
# define the nutrient columns
nut_cols <- c("nitrate", "phosphate", "ammonium", "silicate")
# convert to long for ease of plotting
nutrients_longer <- nutrients_long %>%
gather(nutrient, value, all_of(nut_cols), factor_key = TRUE)
# boxplot of the 4 nutrients in single panel
ggplot(nutrients_longer, aes(x=nutrient, y=value))+geom_boxplot(outlier.size = 0.5)+theme_classic()
# boxplots of individual nutrients
for (i in 1:length(nut_cols)) {
nut_subset <- nutrients_longer %>% filter(nutrient == nut_cols[i])
# ggplot where x = cast, y = value and the lineplots are grouped by cruise
p <- ggplot(data = nut_subset, aes(x = nutrient, y = value)) +
geom_boxplot(outlier.size = 0.5) +
ylab(paste0(nut_cols[i], " concentration (µmol/L)")) +
theme_classic()
print(p)
}
# calculate the difference between the replicates across all nutrients
nut_check <- nutrients_long %>%
group_by(event_number_niskin) %>%
mutate(nitrate_diff = abs(nitrate - lead(nitrate)),
ammonium_diff = abs(ammonium - lead(ammonium)),
phosphate_diff = abs(phosphate - lead(phosphate)),
silicate_diff = abs(silicate - lead(silicate)))
# define the nutrient outlier columns to gather on
nut_diff_cols <- c("nitrate_diff", "phosphate_diff", "ammonium_diff", "silicate_diff")
# convert to long for ease of plotting
nut_check_long <- nut_check %>%
select(nitrate_diff, ammonium_diff, phosphate_diff, silicate_diff) %>%
filter(nitrate_diff != 0) %>%
gather(nutrient_diffs, value, all_of(nut_diff_cols))
# plot the differences and look for outliers
ggplot(data = nut_check_long, aes(x = nutrient_diffs, y = value)) +
geom_boxplot(outlier.size = 0.5) +
ylab(paste0("Concentration (µmol/L)")) +
theme_classic()
View(nutrients_long)
View(check)
check <- data.frame(all_of(nutrient))
# check that number of samples and sums of values in transformed data match input data
nutrient <- c("nitrate", "ammonium", "phosphate", "silicate")
check <- data.frame(all_of(nutrient))
check$input_n <- NA_integer_
check$input_sum <- NA_integer_
check$long_n <- NA_integer_
check$long_sum <- NA_integer_
# count non-NA values in input data and sum all values of each nutrient in input data
for (i in 1:nrow(check)){
nutrient <- check$nutrient[i]
a <- select(nutrients_input, paste0(nutrient,"_a"))
b <- select(nutrients_input, paste0(nutrient,"_b"))
c <- select(nutrients_input, paste0(nutrient,"_c"))
check$input_n[i] <- sum(!is.na(a)) + sum(!is.na(b)) + sum(!is.na(c))
check$input_sum[i] <- sum(a, na.rm = TRUE) + sum(b, na.rm = TRUE) + sum(c, na.rm = TRUE)
}
View(check)
# check that number of samples and sums of values in transformed data match input data
nutrient <- c("nitrate", "ammonium", "phosphate", "silicate")
check <- data.frame(nutrient)
check$input_n <- NA_integer_
check$input_sum <- NA_integer_
check$long_n <- NA_integer_
check$long_sum <- NA_integer_
# count non-NA values in input data and sum all values of each nutrient in input data
for (i in 1:nrow(check)){
nutrient <- check$nutrient[i]
a <- select(nutrients_input, paste0(nutrient,"_a"))
b <- select(nutrients_input, paste0(nutrient,"_b"))
c <- select(nutrients_input, paste0(nutrient,"_c"))
check$input_n[i] <- sum(!is.na(a)) + sum(!is.na(b)) + sum(!is.na(c))
check$input_sum[i] <- sum(a, na.rm = TRUE) + sum(b, na.rm = TRUE) + sum(c, na.rm = TRUE)
}
# count non-NA values in transformed data and sum all values of each nutrient in transformed data
for (i in 1:nrow(check)){
nutrient <- check$nutrient[i]
check$long_n[i] <- sum(!is.na(select(nutrients_long, nutrient)))
check$long_sum[i] <- sum(select(nutrients_long, nutrient), na.rm = TRUE)
}
check$diff_n <- check$input_n - check$long_n
check$diff_sum <- check$input_sum - check$long_sum
View(check)
# remove rows containing no nutrient data
#high_nitrate <- nutrients_long %>%  filter(is.na(nitrate) & is.na(ammonium) & is.na(phosphate) & is.na(silicate))
nutrients_long <- nutrients_long %>%
filter(!is.na(nitrate & ammonium & silicate & phosphate))
View(nutrients_input)
nitrate <- nutrients_input %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c)  %>%
pivot_longer(cols = c(nitrate_a, nitrate_b, nitrate_c), names_to = "replicate",  values_to = "nitrate")
nitrate$replicate <- gsub("nitrate_", "", nitrate$replicate)
ammonium <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c) %>%
pivot_longer(cols = c(ammonium_a, ammonium_b, ammonium_c), names_to = "replicate",  values_to = "ammonium")
ammonium$replicate <- gsub("ammonium_", "", ammonium$replicate)
silicate <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-phosphate_a, -phosphate_b, -phosphate_c) %>%
pivot_longer(cols = c(silicate_a, silicate_b, silicate_c), names_to = "replicate",  values_to = "silicate")
silicate$replicate <- gsub("silicate_", "", silicate$replicate)
phosphate <- nutrients_input %>%
select(-nitrate_a, -nitrate_b, -nitrate_c) %>%
select(-ammonium_a, -ammonium_b, -ammonium_c) %>%
select(-silicate_a, -silicate_b, -silicate_c) %>%
pivot_longer(cols = c(phosphate_a, phosphate_b, phosphate_c), names_to = "replicate",  values_to = "phosphate")
phosphate$replicate <- gsub("phosphate_", "", phosphate$replicate)
nutrients_long <- full_join(nitrate, ammonium, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
nutrients_long <- full_join(nutrients_long, silicate, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
nutrients_long <- full_join(nutrients_long, phosphate, by = c("event_number", "event_number_niskin", "datetime", "latitude", "longitude", "depth", "replicate"))
nutrients_diff <- nutrients_long %>%
filter(is.na(nitrate) &  !is.na(ammonium))
View(nutrients_diff)
nutrients <- nutrients_long %>%
filter(!is.na(nitrate | ammonium | silicate | phosphate))
View(nutrients)
nutrients <- nutrients_long %>%
filter(!is.na(nitrate & ammonium & silicate & phosphate))
nutrients <- nutrients_long %>%
filter(!is.na(nitrate | ammonium | silicate | phosphate))
nutrients <- nutrients_long %>%
filter(!is.na(nitrate | ammonium | silicate | phosphate))
# add quality flag for phosphate
#iode_quality_flag_phosphate
#for events MVCO_304 to MVCO_307 flag == 3
#all else flag == 1
nutrients <- nutrients %>%
mutate(iode_quality_flag_phosphate = case_when(event_number == "MVCO_304"  ~ 3,
else ~ 1))
# add quality flag for phosphate
#iode_quality_flag_phosphate
#for events MVCO_304 to MVCO_307 flag == 3
#all else flag == 1
nutrients <- nutrients %>%
mutate(iode_quality_flag_phosphate = case_when(event_number == "MVCO_304"  ~ 3,
TRUE ~ 1))
# add quality flag for phosphate
#iode_quality_flag_phosphate
#for events MVCO_304 to MVCO_307 flag == 3
#all else flag == 1
nutrients <- nutrients %>%
mutate(iode_quality_flag_phosphate = case_when(event_number == "MVCO_304" | "MVCO_305" ~ 3,
TRUE ~ 1))
# add quality flag for phosphate
#iode_quality_flag_phosphate
#for events MVCO_304 to MVCO_307 flag == 3
#all else flag == 1
nutrients <- nutrients %>%
mutate(iode_quality_flag_phosphate = case_when(event_number == "MVCO_304" ~ 3,
event_number == "MVCO_305" ~ 3,
event_number == "MVCO_306" ~ 3,
event_number == "MVCO_307" ~ 3,
TRUE ~ 1))
Tioga_ID <- read_csv('MVCO_Tioga_cruise_list_2017-2021.csv', col_select = 1:4, show_col_types = FALSE)
# join Tioga cruise number to MV_event
Tioga_ID$event_number <- paste0("MVCO_", Tioga_ID$MV_Event)
nutrients <- left_join(nutrients, Tioga_ID, by = "event_number")
nutrients <- nutrients %>%
rename(ship = Ship) %>%
rename(cruise_ID = 'Cruise ID') %>%
select(-Date, -MV_Event)  %>%
relocate(ship, .before = datetime) %>%
relocate(cruise_ID, .before = datetime)
summary(nutrients) # visual min max for all columns
# visually check the printed nutrient data for maxima exceeding expected thresholds:
# nitrate > 30
# ammonium > 5
# phosphate > 3
# silicate > 60
# filter for values exceeding the thresholds
high_nitrate <- nutrients %>%  filter(nitrate > 30)
high_ammonium <- nutrients %>% filter(ammonium > 5)
high_phosphate <- nutrients %>% filter(phosphate > 3)
high_silicate <- nutrients %>% filter(silicate > 60)
# check console output for summary and alerts
print(paste(nrow(high_nitrate), "nitrate observations exceed max" ))
print(paste(nrow(high_ammonium), "ammonium observations exceed max" ))
print(paste(nrow(high_phosphate), "phosphate observations exceed max" ))
print(paste(nrow(high_silicate), "silicate observations exceed max" ))
# investigate high ammonium values
hist(high_ammonium$ammonium)
# could rbind all high nutrient data frames for better reproducibility # this way is simpler in this instance
write.csv(high_ammonium, "high_ammonium.csv")
# only one of these values is new to version 3
summary(nutrients) # visual min max for all columns
# define the nutrient columns
nut_cols <- c("nitrate", "phosphate", "ammonium", "silicate")
# convert to long for ease of plotting
nutrients_longer <- nutrients %>%
gather(nutrient, value, all_of(nut_cols), factor_key = TRUE)
# boxplot of the 4 nutrients in single panel
ggplot(nutrients_longer, aes(x=nutrient, y=value))+geom_boxplot(outlier.size = 0.5)+theme_classic()
# boxplots of individual nutrients
for (i in 1:length(nut_cols)) {
nut_subset <- nutrients_longer %>% filter(nutrient == nut_cols[i])
# ggplot where x = cast, y = value and the lineplots are grouped by cruise
p <- ggplot(data = nut_subset, aes(x = nutrient, y = value)) +
geom_boxplot(outlier.size = 0.5) +
ylab(paste0(nut_cols[i], " concentration (µmol/L)")) +
theme_classic()
print(p)
}
ggplot(nutrients_longer, aes(x=as.factor(iode_quality_flag_phosphate), y=phosphate)) +
geom_boxplot() + xlab('iode_quality_flag')
View(nutrients_longer)
ggplot(nutrients, aes(x=as.factor(iode_quality_flag_phosphate), y=phosphate)) +
geom_boxplot() + xlab('iode_quality_flag')
# define the nutrient columns
nut_cols <- c("nitrate", "phosphate", "ammonium", "silicate")
# convert to long for ease of plotting
nutrients_longer <- nutrients %>%
gather(nutrient, value, all_of(nut_cols), factor_key = TRUE)
# boxplot of the 4 nutrients in single panel
ggplot(nutrients_longer, aes(x=nutrient, y=value))+geom_boxplot(outlier.size = 0.5)+theme_classic()
# boxplots of individual nutrients
for (i in 1:length(nut_cols)) {
nut_subset <- nutrients_longer %>% filter(nutrient == nut_cols[i])
# ggplot where x = cast, y = value and the lineplots are grouped by cruise
p <- ggplot(data = nut_subset, aes(x = nutrient, y = value)) +
geom_boxplot(outlier.size = 0.5) +
ylab(paste0(nut_cols[i], " concentration (µmol/L)")) +
theme_classic()
print(p)
}
ggplot(nutrients, aes(x=as.factor(iode_quality_flag_phosphate), y=phosphate)) +
geom_boxplot() + xlab('iode_quality_flag')
# calculate the difference between the replicates across all nutrients
nut_check <- nutrients %>%
group_by(event_number_niskin) %>%
mutate(nitrate_diff = abs(nitrate - lead(nitrate)),
ammonium_diff = abs(ammonium - lead(ammonium)),
phosphate_diff = abs(phosphate - lead(phosphate)),
silicate_diff = abs(silicate - lead(silicate)))
# define the nutrient outlier columns to gather on
nut_diff_cols <- c("nitrate_diff", "phosphate_diff", "ammonium_diff", "silicate_diff")
# convert to long for ease of plotting
nut_check_long <- nut_check %>%
select(nitrate_diff, ammonium_diff, phosphate_diff, silicate_diff) %>%
filter(nitrate_diff != 0) %>%
gather(nutrient_diffs, value, all_of(nut_diff_cols))
# plot the differences and look for outliers
ggplot(data = nut_check_long, aes(x = nutrient_diffs, y = value)) +
geom_boxplot(outlier.size = 0.5) +
ylab(paste0("Concentration (µmol/L)")) +
theme_classic()
# plot location of all samples
map_locs(nutrients, colorvar = "depth", region = "transect")
# map_locs(nutrients_long, colorvar = "datetime", region = "transect")
# investigate distribution of low-latitude samples
hist(nutrients$latitude, plot = FALSE)
# filter samples into northern and southern sections using cutoff of 41.30 deg N suggested by histogram data
southern_samples <- nutrients %>% filter(latitude < 41.30 )
northern_samples <- nutrients %>% filter(latitude > 41.30 )
# southern samples are from 2007-2009 so already in package version 1
# plot sections
map_locs(southern_samples, colorvar = "depth", region = "transect")
map_locs(southern_samples, colorvar = "ammonium", region = "transect")
#map_locs(northern_samples, colorvar = "depth", region = "transect")
# plot high ammonium samples
map_locs(high_ammonium, colorvar = "ammonium", region = "transect")
new_data <- nutrients %>% filter(datetime > "2017-05-30 20:00:00")
map_locs(new_data, colorvar = "ammonium", region = "transect")
new_old_data <- nutrients %>% filter(datetime < "2006-04-19 21:10:00")
map_locs(new_old_data, colorvar = "ammonium", region = "transect")
version1  <- nutrients %>% filter("2006-04-19 21:10:00" < datetime & datetime < "2017-05-30 20:00:00")
map_locs(version1, colorvar = "ammonium", region = "transect")
hist(nutrients$longitude, plot = FALSE)
east_west <- nutrients %>% filter(-70.53 < longitude | longitude < -70.59)
map_locs(east_west, colorvar = "ammonium", region = "transect")
# rename nitrate column to nitrate+nitrite
nutrients <- rename(nutrients, nitrate_nitrite = nitrate)
# write csv file for package
write.csv(nutrients, "nes-lter-nutrient-mvco.csv", row.names = FALSE)
data_table <- read.csv(here('nes-lter-nutrient-mvco.csv'))
# identify date column for ediutilities package to generate temporal coverage
data_table$date = ymd_hms(data_table$datetime)
excel_to_template(here('nutrient-mvco-info'), 'nes-lter-nutrient-mvco', rights='CCBY')
# rename nitrate column to nitrate+nitrite
nutrients <- rename(nutrients, nitrate_nitrite = nitrate)
nutrients <- nutrients [order(nutrients$event_number_niskin, nutrients$replicate),]
# write csv file for package
write.csv(nutrients, "nes-lter-nutrient-mvco.csv", row.names = FALSE)
data_table <- read.csv(here('nes-lter-nutrient-mvco.csv'))
# identify date column for ediutilities package to generate temporal coverage
data_table$date = ymd_hms(data_table$datetime)
excel_to_template(here('nutrient-mvco-info'), 'nes-lter-nutrient-mvco', rights='CCBY')
pkg_id <- 'knb-lter-nes.1.3'
make_eml(here(),
dataset.title='Dissolved inorganic nutrients from the Marthas Vineyard Coastal Observatory (MVCO), including 4 macro-nutrients from water column bottle samples, ongoing since 2003 (NES-LTER since 2017)',
data.table='nes-lter-nutrient-mvco.csv',
data.table.description='Dissolved inorganic nutrients from water column bottle samples taken near the Marthas Vineyard Coastal Observatory',
data.table.name = 'nes-lter-nutrient-mvco',
temporal.coverage = temporal_coverage(data_table$date),
geographic.description = "Marthas Vineyard Coastal Observatory",
geographic.coordinates = geographic_coordinates(data_table$latitude, data_table$longitude),
maintenance.description = "ongoing",
user.id = "NES",
user.domain = "LTER",
package.id = pkg_id)
project_insert(pkg_id)
issues()
